/****************************************************************************
** MIT License
**
** Author   : xiaofeng.zhu
** Support  : zxffffffff@outlook.com, 1337328542@qq.com
**
****************************************************************************/
#include "mainwindow.h"
#include <QPainter>
#include <QRandomGenerator>
#include <QTimer>

using namespace StockCharts;

namespace
{
    StockCore Candlestick()
    {
        std::vector<std::string> o = {"1886.00", "1909.98", "1911.53", "1915.15", "1927.80", "1890.00", "1889.99", "1880.00", "1890.01", "1895.10", "1921.10", "1942.00", "1952.99", "1949.51", "1949.22", "1943.10", "1958.75", "1945.00", "1952.36", "1945.11", "1960.00", "1945.00", "1965.00", "1990.20", "2005.00", "2005.00", "2032.00", "2025.28", "2020.01", "2055.00", "2000.00", "2006.33", "1998.07", "1998.27", "1948.33", "1921.03", "1933.33", "1927.33", "1928.33", "1856.42", "1872.92", "1848.33", "1812.33", "1868.33", "1823.34", "1850.33", "1803.33", "1762.47", "1768.33", "1766.30", "1780.33", "1753.10", "1744.33", "1738.32", "1739.33", "1743.60", "1764.33", "1778.33", "1738.32", "1723.33", "1751.99", "1748.21", "1775.33", "1758.33", "1731.33", "1733.33", "1698.33", "1758.33", "1793.32", "1808.33", "1814.33", "1771.33", "1745.45", "1681.66", "1728.33", "1741.33", "1768.53", "1780.02", "1778.33", "1759.46", "1780.53", "1766.33", "1745.33", "1707.33", "1748.33", "1746.33", "1736.33", "1731.33", "1708.27", "1698.33", "1676.33", "1639.83", "1603.33", "1690.33", "1716.33", "1683.33", "1702.21", "1702.33", "1696.33", "1698.33", "1612.33", "1628.33", "1708.33", "1744.33", "1786.33", "1742.43", "1738.31", "1738.53", "1750.33", "1824.13", "1818.33", "1780.33", "1765.39", "1753.33", "1786.33", "1789.74", "1838.34", "1878.33", "1855.96", "1878.94", "1878.33", "1847.13", "1818.33", "1835.33", "1878.33", "1817.42", "1847.21", "1879.32", "1933.33", "1979.34", "1920.37", "1921.33", "1933.33", "1938.33", "1894.33", "1897.33", "1840.01", "1846.33", "1855.72", "1943.15", "1926.33", "1926.33", "1906.34", "1953.33", "2000.34", "2023.33", "2033.33", "2048.33", "2019.33", "2128.33", "2111.33", "2146.33", "2127.21", "2031.33", "2018.33", "2023.33", "2029.03", "2078.83", "2093.33", "2120.48", "2096.53", "2132.33", "2038.33", "2033.27", "1943.21", "1959.07", "1961.33", "1910.33", "1918.33", "1928.33", "1963.73", "1938.33", "1943.16", "1931.33", "1878.33", "1830.33", "1827.33", "1772.52", "1759.55", "1783.33", "1746.33", "1752.01", "1756.33", "1731.26", "1768.34", "1798.31", "1798.33", "1782.54", "1756.27", "1778.33", "1775.03", "1758.33", "1803.33", "1803.53", "1830.63", "1842.36", "1858.33", "1833.33", "1819.43", "1811.33", "1778.33", "1866.33", "1868.43", "1907.26", "1848.33", "1844.33", "1817.84", "1800.75", "1796.51", "1787.33", "1826.33", "1728.33", "1606.33", "1616.33", "1637.16", "1598.33", "1581.33", "1628.33", "1637.33", "1643.33", "1612.41", "1604.33", "1638.33", "1639.36", "1627.33", "1588.35", "1611.32", "1537.33", "1568.13", "1583.33", "1567.33", "1643.32", "1625.97", "1553.33", "1516.21", "1533.50", "1600.55", "1602.99", "1678.33", "1674.33", "1668.33", "1710.33", "1758.34", "1678.33", "1629.33", "1667.33", "1671.21", "1712.39", "1708.33", "1642.33", "1703.33", "1788.34", "1681.33", "1781.33", "1857.33", "1916.15", "1938.33", "1967.33", "1953.33", "1934.22", "1958.33", "1933.35", "1952.33", "1946.33", "1953.88", "1942.85", "1978.43", "1988.33", "1973.33", "1978.33", "2053.33", "2038.30", "2043.33", "2086.33", "2078.33", "2028.29", "1999.04", "2039.03", "2051.03", "2044.03", "2106.03", "2114.68", "2151.03", "2154.13", "2198.03", "2154.03", "2151.03", "2219.03", "2224.03", "2174.03", "2179.03", "2209.03", "2181.03", "2174.53", "2200.00", "2170.05", "2167.01", "2044.03", "2010.03", "2014.11", "2033.03", "2018.03", "2024.03", "1984.13", "1941.03", "1924.78", "1908.11", "1835.03", "1859.03", "1924.03", "1959.03", "1985.03", "2006.07", "1969.03", "2046.11", "2091.03", "2015.00", "2048.93", "2035.03", "2030.13", "2014.03", "1984.11", "1989.93", "1994.03", "1979.03", "1970.03", "2001.03", "2006.06", "2063.09", "2120.03", "2015.03", "1980.03", "2004.13", "1999.03", "2002.23", "1944.03", "1929.04", "1940.03", "1957.91", "1959.13", "1994.03", "1994.03", "1959.03", "1933.96", "2009.03", "2029.03", "1934.03", "1936.03", "1914.03", "2033.99", "1959.03", "2054.03", "1999.03", "2139.03", "2138.03", "2059.03", "2168.03", "2267.02", "2224.17", "2414.03", "2410.19", "2547.01", "2444.03", "2327.83", "2296.03", "2284.03", "2150.03", "2109.03", "2071.25", "2089.03", "2060.22", "2039.03", "2100.92", "2144.03", "2042.03", "2028.03", "2007.03", "1967.03", "2032.14", "2020.09", "2074.03", "2115.03", "2123.03", "2047.03", "2049.03", "2101.03", "2056.03", "2023.83", "1949.03", "1959.01", "1900.03", "1829.03", "1832.03", "1785.63", "1762.02", "1777.03", "1857.02", "1809.00", "1799.03", "1810.84", "1804.53", "1789.53", "1792.53", "1786.80", "1793.81", "1799.03", "1824.98", "1774.03", "1761.73", "1711.03", "1697.04", "1705.03", "1685.03", "1694.03", "1691.69", "1685.03", "1720.53", "1729.02", "1730.04", "1679.03", "1643.53", "1674.03", "1699.03", "1670.03", "1683.03", "1689.04", "1704.03", "1711.95", "1660.41", "1689.58", "1676.03", "1659.03", "1644.02", "1634.03", "1637.03", "1613.87", "1585.03", "1602.03", "1578.03", "1699.81", "1689.03", "1693.13", "1659.02", "1684.03", "1684.03", "1680.16", "1699.03", "1709.65", "1659.03", "1651.03", "1619.03", "1628.36", "1594.22", "1589.03", "1595.00", "1594.03", "1609.03", "1651.79", "1624.03", "1659.03", "1719.03", "1729.02", "1704.03", "1647.03", "1662.77", "1658.70", "1691.03", "1719.03", "1725.03", "1754.03", "1784.03", "1751.03", "1729.61", "1690.03", "1691.02", "1693.03", "1663.83", "1659.03", "1632.03", "1633.03", "1659.03", "1656.41", "1633.03", "1598.93", "1589.03", "1592.03", "1587.00", "1603.80", "1629.03", "1621.12", "1634.03", "1645.91", "1644.03", "1630.23", "1649.03", "1589.03", "1575.04", "1613.88", "1631.03", "1617.03"};
        std::vector<std::string> h = {"1907.00", "1918.00", "1918.99", "1932.88", "1935.00", "1923.10", "1904.00", "1887.98", "1908.00", "1918.99", "1938.00", "1948.00", "1964.97", "1952.30", "1962.00", "1955.90", "1970.00", "1951.65", "1959.00", "1999.68", "1976.80", "1972.00", "1972.80", "1994.77", "2014.89", "2009.35", "2039.00", "2054.45", "2024.29", "2067.77", "2077.00", "2020.33", "2019.33", "2028.27", "1998.33", "1943.37", "1936.33", "1945.32", "1948.33", "1930.33", "1885.96", "1883.33", "1853.75", "1870.33", "1885.33", "1866.68", "1860.33", "1803.33", "1773.33", "1774.13", "1793.11", "1793.23", "1768.88", "1758.33", "1739.33", "1750.33", "1765.33", "1782.22", "1779.48", "1735.33", "1752.25", "1753.33", "1775.33", "1776.27", "1756.33", "1766.81", "1763.29", "1758.33", "1797.33", "1848.33", "1827.33", "1823.33", "1788.33", "1727.31", "1754.83", "1766.21", "1784.33", "1798.33", "1811.32", "1776.33", "1796.33", "1814.23", "1773.33", "1766.30", "1748.33", "1767.03", "1763.33", "1767.06", "1771.33", "1716.93", "1708.43", "1669.83", "1643.13", "1712.33", "1718.33", "1748.33", "1702.21", "1703.98", "1723.33", "1733.33", "1662.23", "1663.33", "1728.33", "1755.33", "1799.33", "1783.33", "1764.99", "1746.33", "1771.22", "1828.58", "1829.32", "1841.90", "1775.33", "1786.61", "1792.32", "1812.33", "1839.33", "1885.23", "1886.31", "1889.81", "1885.33", "1889.33", "1855.33", "1879.12", "1884.23", "1886.33", "1851.20", "1891.89", "1946.33", "1989.15", "1947.33", "1944.33", "1962.33", "1971.82", "1958.32", "1897.33", "1887.18", "1856.63", "1871.33", "1946.32", "1957.13", "1943.33", "1955.33", "1967.21", "2014.33", "2043.33", "2047.28", "2051.31", "2067.31", "2132.58", "2133.83", "2146.33", "2195.29", "2098.33", "2041.33", "2047.46", "2063.99", "2086.33", "2122.38", "2143.28", "2146.23", "2158.33", "2074.11", "2095.25", "2023.33", "1966.20", "1968.33", "1966.95", "1920.48", "1938.28", "1968.23", "1968.33", "1945.33", "1964.53", "1944.33", "1895.33", "1887.33", "1827.33", "1785.33", "1798.83", "1796.33", "1762.33", "1763.38", "1747.93", "1773.33", "1806.20", "1809.13", "1823.32", "1794.33", "1788.31", "1822.55", "1804.63", "1826.33", "1822.11", "1836.63", "1857.32", "1863.34", "1899.34", "1838.33", "1828.13", "1817.13", "1866.33", "1908.32", "1920.13", "1928.28", "1855.33", "1868.23", "1856.33", "1828.55", "1823.34", "1838.33", "1841.73", "1698.31", "1634.21", "1666.33", "1683.93", "1622.33", "1638.33", "1661.33", "1662.33", "1647.13", "1623.33", "1649.51", "1662.81", "1686.49", "1638.12", "1621.33", "1613.32", "1594.68", "1591.33", "1603.33", "1643.32", "1659.20", "1620.88", "1577.33", "1575.88", "1621.53", "1621.32", "1678.33", "1691.93", "1691.33", "1727.33", "1763.34", "1781.21", "1687.33", "1672.34", "1723.33", "1738.33", "1747.32", "1734.31", "1703.33", "1801.33", "1766.53", "1788.33", "1857.33", "1916.15", "1952.23", "1984.33", "1967.26", "1964.33", "1974.93", "1991.33", "1952.83", "1983.83", "1977.11", "1964.24", "1982.33", "2007.21", "1992.33", "1998.21", "2053.33", "2088.33", "2052.33", "2093.33", "2096.33", "2087.33", "2039.03", "2042.03", "2057.03", "2058.72", "2115.53", "2147.03", "2154.03", "2167.91", "2203.03", "2210.40", "2173.03", "2239.02", "2238.03", "2247.03", "2219.37", "2223.03", "2207.98", "2177.38", "2209.03", "2279.03", "2200.83", "2159.13", "2039.09", "2038.91", "2033.13", "2033.84", "2036.03", "2044.23", "1989.53", "1944.08", "1958.03", "1925.03", "1868.03", "1927.01", "1965.87", "1995.03", "2008.97", "2006.53", "2054.28", "2094.03", "2078.91", "2058.03", "2056.83", "2088.03", "2057.39", "2027.03", "2005.93", "2007.03", "2008.83", "1989.03", "2013.03", "2038.03", "2076.33", "2121.01", "2124.03", "2005.83", "2005.05", "2045.03", "2055.38", "1981.03", "1947.91", "1972.03", "1967.83", "1985.12", "2002.03", "2045.39", "2009.03", "1979.02", "2028.83", "2036.03", "2039.02", "1958.90", "1959.03", "2044.03", "2054.03", "2055.03", "2108.80", "2139.03", "2138.03", "2138.98", "2183.53", "2277.03", "2303.92", "2414.03", "2455.69", "2586.91", "2560.23", "2415.46", "2337.91", "2323.63", "2289.03", "2157.30", "2109.02", "2119.03", "2108.51", "2068.69", "2100.92", "2146.03", "2138.53", "2059.03", "2049.05", "2014.52", "2055.33", "2050.51", "2093.38", "2122.03", "2132.36", "2119.93", "2109.53", "2109.91", "2099.03", "2084.03", "2018.48", "1964.02", "1958.01", "1892.03", "1845.83", "1847.83", "1806.03", "1817.91", "1865.23", "1858.02", "1810.26", "1828.04", "1827.03", "1804.70", "1796.25", "1789.01", "1796.35", "1808.80", "1825.03", "1834.03", "1799.42", "1759.13", "1714.69", "1708.03", "1698.02", "1697.93", "1699.06", "1699.02", "1727.91", "1741.53", "1768.93", "1695.03", "1684.03", "1679.56", "1701.38", "1689.08", "1687.91", "1709.03", "1736.53", "1723.51", "1709.71", "1690.62", "1691.51", "1663.03", "1664.93", "1654.03", "1655.03", "1667.03", "1636.03", "1603.03", "1621.95", "1706.62", "1704.03", "1701.18", "1694.00", "1693.01", "1693.61", "1694.03", "1706.01", "1709.65", "1709.64", "1665.45", "1650.93", "1628.43", "1627.53", "1609.03", "1617.91", "1625.04", "1646.01", "1651.79", "1654.03", "1659.03", "1723.84", "1729.02", "1728.03", "1695.03", "1679.03", "1670.03", "1696.83", "1737.02", "1736.02", "1771.03", "1787.03", "1761.03", "1775.03", "1723.03", "1693.01", "1704.03", "1705.81", "1667.03", "1657.03", "1638.03", "1676.03", "1679.03", "1663.38", "1624.73", "1597.91", "1600.03", "1603.99", "1608.70", "1633.06", "1632.12", "1642.02", "1655.61", "1664.03", "1659.62", "1649.03", "1639.03", "1588.83", "1625.03", "1650.03", "1669.03"};
        std::vector<std::string> l = {"1878.01", "1864.58", "1905.00", "1907.51", "1904.90", "1880.13", "1877.00", "1858.01", "1881.18", "1878.10", "1892.66", "1917.00", "1947.02", "1931.00", "1935.00", "1934.51", "1945.00", "1926.00", "1922.00", "1944.51", "1941.00", "1940.67", "1930.06", "1950.50", "1996.16", "1985.01", "1986.00", "2010.00", "2001.01", "2015.21", "1999.99", "1989.34", "1979.33", "1978.63", "1943.33", "1918.33", "1910.33", "1906.33", "1908.33", "1856.42", "1853.66", "1841.32", "1810.33", "1826.41", "1813.33", "1827.33", "1803.33", "1748.64", "1736.33", "1758.33", "1757.33", "1745.31", "1744.33", "1731.34", "1708.33", "1725.33", "1733.83", "1750.33", "1730.33", "1717.33", "1721.35", "1733.33", "1721.00", "1744.33", "1728.33", "1730.33", "1683.34", "1716.33", "1759.33", "1807.31", "1789.31", "1764.83", "1745.45", "1678.33", "1680.33", "1738.51", "1748.33", "1747.01", "1753.83", "1746.33", "1774.22", "1758.53", "1729.41", "1686.33", "1684.36", "1744.87", "1728.43", "1731.33", "1700.02", "1687.13", "1673.33", "1639.83", "1582.33", "1663.33", "1695.68", "1675.33", "1664.66", "1673.34", "1670.61", "1689.99", "1571.33", "1581.33", "1678.33", "1696.41", "1769.33", "1699.44", "1710.33", "1682.13", "1733.43", "1772.33", "1803.33", "1780.33", "1745.33", "1753.33", "1726.43", "1778.41", "1778.35", "1847.28", "1843.99", "1859.33", "1866.33", "1837.33", "1815.64", "1819.33", "1835.72", "1805.30", "1768.33", "1828.33", "1858.34", "1930.33", "1897.33", "1909.33", "1909.77", "1929.34", "1894.33", "1867.21", "1830.33", "1813.67", "1841.33", "1843.89", "1926.33", "1909.50", "1895.88", "1917.65", "1916.84", "1996.33", "1992.33", "2006.33", "2006.33", "2019.33", "2094.93", "2090.33", "2127.21", "2003.33", "2018.33", "1991.16", "2019.33", "2014.33", "2064.56", "2103.35", "2078.33", "2096.33", "2034.33", "2023.33", "1928.33", "1925.06", "1928.33", "1909.38", "1897.93", "1897.35", "1905.83", "1929.41", "1903.33", "1924.58", "1875.33", "1830.33", "1826.33", "1766.53", "1748.33", "1768.34", "1743.33", "1728.33", "1744.99", "1719.83", "1713.33", "1760.33", "1780.38", "1782.54", "1747.75", "1739.52", "1766.33", "1738.33", "1791.33", "1780.33", "1778.43", "1822.33", "1836.33", "1832.33", "1807.33", "1784.34", "1778.21", "1765.33", "1868.43", "1874.33", "1840.33", "1820.75", "1809.34", "1785.56", "1781.73", "1764.23", "1773.33", "1728.33", "1606.33", "1603.41", "1613.33", "1598.33", "1563.33", "1588.33", "1631.33", "1618.43", "1611.33", "1602.34", "1606.41", "1629.33", "1604.48", "1560.33", "1579.22", "1509.43", "1533.43", "1524.28", "1562.43", "1573.05", "1621.33", "1544.10", "1515.10", "1503.83", "1578.33", "1578.33", "1607.21", "1663.41", "1657.33", "1664.52", "1728.34", "1653.33", "1628.33", "1624.93", "1654.69", "1696.33", "1667.13", "1599.05", "1636.09", "1712.67", "1660.45", "1681.33", "1758.33", "1873.42", "1917.29", "1940.34", "1939.74", "1919.33", "1928.33", "1928.93", "1923.33", "1943.33", "1918.83", "1923.33", "1946.33", "1977.34", "1938.34", "1963.33", "1989.83", "2009.93", "2024.63", "2029.33", "2051.33", "2020.93", "1980.03", "1993.18", "2012.92", "2009.03", "2024.03", "2103.39", "2107.03", "2107.03", "2137.84", "2149.11", "2119.14", "2120.18", "2199.04", "2173.07", "2169.11", "2167.21", "2165.03", "2131.03", "2164.54", "2160.13", "2152.11", "2044.03", "1990.03", "1996.05", "2004.39", "1999.03", "2004.09", "1984.13", "1935.03", "1912.03", "1908.03", "1832.33", "1825.04", "1860.03", "1912.03", "1962.74", "1973.03", "1962.03", "2024.12", "2032.63", "2011.53", "2010.53", "2024.13", "2029.03", "1992.03", "1971.03", "1949.03", "1975.03", "1968.03", "1950.73", "1964.04", "2003.03", "2009.03", "2061.33", "2015.03", "1960.25", "1959.03", "1994.11", "1985.18", "1917.03", "1905.83", "1940.03", "1929.03", "1914.58", "1951.26", "1994.03", "1935.04", "1924.03", "1910.18", "1961.04", "1920.51", "1926.03", "1859.21", "1919.03", "1947.03", "1969.13", "1992.03", "1992.03", "2079.03", "2026.33", "2080.24", "2119.53", "2224.03", "2237.25", "2340.63", "2424.03", "2444.03", "2309.03", "2272.03", "2250.03", "2150.03", "2099.03", "2061.13", "2054.03", "2049.25", "2019.05", "2044.03", "2084.14", "2042.03", "2019.13", "2000.03", "1941.53", "1965.88", "1999.30", "1988.03", "2075.14", "2094.03", "2044.03", "2017.63", "2022.05", "2034.03", "1995.06", "1941.49", "1942.84", "1898.03", "1829.02", "1814.03", "1785.08", "1759.03", "1754.05", "1780.05", "1801.54", "1796.63", "1800.11", "1799.03", "1779.24", "1764.03", "1774.03", "1763.84", "1787.03", "1798.03", "1772.03", "1759.58", "1711.03", "1691.13", "1690.03", "1679.04", "1672.94", "1677.03", "1684.21", "1683.03", "1710.50", "1730.04", "1671.68", "1639.63", "1642.19", "1660.10", "1656.29", "1650.03", "1681.30", "1690.03", "1695.03", "1659.65", "1649.03", "1671.13", "1644.03", "1634.53", "1631.03", "1624.03", "1606.03", "1584.11", "1575.15", "1559.03", "1673.03", "1674.54", "1682.03", "1654.03", "1650.93", "1662.03", "1680.03", "1685.03", "1694.03", "1659.03", "1647.03", "1619.03", "1611.33", "1594.22", "1584.03", "1585.83", "1580.05", "1609.03", "1625.69", "1594.04", "1617.03", "1678.03", "1706.78", "1689.61", "1647.03", "1659.03", "1639.07", "1636.10", "1663.00", "1705.03", "1738.73", "1729.03", "1734.04", "1729.61", "1680.53", "1664.03", "1674.05", "1657.66", "1650.04", "1630.03", "1615.03", "1642.02", "1650.03", "1629.03", "1590.03", "1568.03", "1564.28", "1567.14", "1557.53", "1589.03", "1602.34", "1619.03", "1619.03", "1605.03", "1629.53", "1592.03", "1589.03", "1559.03", "1544.03", "1609.03", "1617.03"};
        std::vector<std::string> c = {"1906.90", "1876.00", "1910.00", "1911.53", "1923.96", "1916.01", "1885.00", "1879.98", "1890.30", "1898.44", "1898.00", "1919.60", "1950.21", "1944.65", "1947.00", "1939.00", "1950.10", "1943.10", "1951.66", "1949.50", "1953.00", "1958.89", "1948.41", "1963.60", "1999.00", "1990.00", "2002.00", "2033.01", "2018.00", "2029.05", "2045.00", "2008.33", "2014.33", "1988.88", "1987.34", "1935.43", "1914.33", "1924.07", "1920.35", "1929.33", "1855.33", "1853.43", "1849.33", "1834.33", "1878.93", "1831.33", "1843.93", "1796.23", "1766.33", "1764.33", "1766.58", "1782.36", "1756.74", "1733.49", "1721.13", "1733.84", "1738.33", "1759.33", "1778.34", "1734.33", "1739.33", "1746.33", "1736.33", "1756.57", "1741.00", "1746.33", "1744.52", "1730.33", "1771.33", "1815.33", "1806.71", "1813.33", "1773.25", "1710.81", "1686.33", "1751.33", "1758.31", "1775.33", "1768.63", "1769.15", "1784.32", "1787.33", "1747.33", "1760.33", "1698.33", "1762.33", "1743.33", "1743.33", "1758.34", "1697.33", "1708.43", "1645.33", "1639.13", "1668.33", "1699.26", "1730.52", "1673.33", "1682.63", "1686.12", "1698.48", "1653.28", "1581.33", "1678.33", "1747.34", "1772.76", "1757.51", "1731.53", "1685.33", "1758.83", "1778.33", "1823.21", "1836.81", "1768.73", "1777.39", "1742.44", "1805.34", "1786.20", "1855.32", "1885.33", "1865.32", "1870.88", "1868.95", "1847.00", "1828.30", "1851.33", "1874.31", "1817.33", "1846.29", "1865.33", "1943.33", "1933.33", "1921.33", "1928.53", "1963.32", "1947.85", "1890.33", "1870.60", "1839.94", "1845.33", "1855.72", "1945.33", "1918.88", "1944.33", "1920.33", "1960.55", "2002.33", "2029.56", "2028.33", "2053.33", "2019.33", "2116.51", "2110.15", "2172.42", "2098.33", "2026.33", "2016.53", "2037.29", "2029.03", "2097.32", "2113.33", "2128.33", "2096.53", "2068.33", "2064.88", "2021.33", "1934.20", "1945.63", "1950.21", "1912.33", "1911.32", "1909.10", "1963.33", "1919.34", "1934.36", "1919.33", "1874.76", "1832.60", "1806.74", "1770.33", "1773.33", "1786.33", "1739.47", "1752.11", "1747.93", "1732.32", "1768.34", "1798.43", "1798.27", "1782.53", "1743.33", "1782.97", "1781.33", "1804.41", "1803.82", "1797.33", "1839.38", "1851.36", "1879.33", "1822.33", "1819.33", "1790.51", "1778.33", "1895.30", "1889.33", "1908.23", "1849.32", "1845.45", "1817.93", "1808.33", "1798.33", "1800.39", "1833.33", "1672.33", "1613.33", "1616.02", "1664.33", "1616.40", "1594.07", "1635.33", "1632.33", "1640.91", "1612.41", "1611.43", "1647.33", "1649.00", "1636.55", "1597.13", "1600.34", "1536.33", "1564.33", "1574.36", "1573.33", "1643.35", "1603.51", "1548.52", "1526.33", "1598.30", "1598.33", "1613.33", "1677.53", "1678.37", "1668.33", "1728.83", "1777.33", "1672.13", "1649.33", "1677.33", "1702.33", "1727.63", "1733.33", "1657.32", "1728.12", "1747.23", "1691.22", "1782.44", "1878.33", "1918.34", "1947.33", "1958.33", "1953.33", "1934.23", "1976.32", "1940.33", "1961.23", "1939.33", "1950.44", "1963.33", "1982.33", "1991.23", "1972.33", "1991.33", "2083.33", "2035.03", "2040.33", "2081.34", "2070.33", "2027.08", "1997.03", "2034.00", "2040.67", "2049.97", "2115.94", "2117.03", "2152.03", "2137.84", "2197.51", "2158.53", "2150.03", "2230.03", "2210.53", "2181.25", "2181.03", "2199.98", "2177.03", "2189.03", "2204.03", "2179.03", "2153.53", "2030.32", "2001.13", "2017.91", "2008.03", "2018.34", "2016.99", "1968.88", "1930.53", "1943.03", "1918.03", "1838.06", "1862.03", "1918.03", "1965.81", "1985.39", "2001.03", "2053.47", "2036.85", "2067.97", "2014.53", "2039.03", "2053.83", "2047.03", "2014.01", "1974.63", "2006.03", "1980.03", "1967.92", "1979.03", "2029.03", "2020.03", "2085.06", "2121.03", "2003.53", "1968.03", "2015.08", "1993.13", "1972.03", "1930.03", "1948.03", "1955.03", "1949.02", "1969.03", "2028.73", "1989.39", "1969.53", "1934.48", "1985.03", "2007.03", "1929.04", "1896.02", "1919.03", "2019.14", "1992.03", "2099.03", "2017.03", "2117.03", "2081.81", "2109.03", "2148.03", "2266.03", "2247.05", "2419.03", "2430.03", "2560.03", "2415.46", "2327.83", "2272.03", "2279.88", "2148.94", "2104.03", "2068.35", "2075.21", "2047.03", "2048.03", "2100.92", "2134.03", "2038.98", "2029.03", "1999.66", "1968.44", "2022.03", "2041.03", "2093.03", "2123.03", "2119.93", "2058.76", "2049.03", "2099.03", "2059.03", "2018.48", "1956.03", "1957.03", "1892.03", "1826.03", "1832.03", "1789.03", "1789.37", "1800.68", "1840.03", "1801.53", "1804.03", "1824.54", "1799.03", "1775.04", "1788.03", "1779.03", "1791.93", "1799.03", "1809.03", "1771.43", "1752.14", "1708.03", "1697.04", "1696.03", "1672.94", "1696.93", "1693.42", "1685.91", "1722.53", "1749.24", "1678.99", "1679.22", "1652.68", "1674.83", "1689.08", "1664.03", "1693.82", "1690.38", "1704.03", "1701.60", "1659.65", "1680.93", "1658.61", "1654.03", "1633.04", "1629.05", "1635.03", "1623.84", "1584.03", "1602.03", "1674.36", "1701.53", "1692.36", "1693.03", "1658.03", "1671.03", "1684.03", "1688.03", "1698.03", "1709.64", "1655.03", "1627.53", "1611.33", "1620.03", "1594.14", "1588.35", "1609.01", "1624.72", "1625.83", "1654.03", "1629.55", "1684.13", "1719.03", "1725.03", "1692.03", "1664.83", "1647.03", "1670.43", "1682.53", "1729.03", "1752.03", "1754.03", "1761.01", "1745.53", "1716.03", "1690.03", "1686.03", "1686.03", "1655.38", "1635.03", "1623.03", "1646.03", "1664.03", "1649.03", "1620.03", "1594.03", "1585.98", "1593.02", "1590.03", "1596.99", "1627.03", "1629.02", "1627.03", "1637.21", "1639.03", "1631.03", "1629.03", "1581.58", "1554.33", "1635.03", "1637.11"};
        std::vector<std::string> v = {"2606149", "2792662", "1387461", "1679901", "2008584", "3035714", "2459842", "2822088", "2103741", "3703236", "3486986", "2148987", "2068510", "1691244", "2511357", "1406137", "1870461", "2195603", "2422072", "3341623", "2052724", "1985377", "2344686", "2394921", "1564389", "2093177", "3275166", "2632940", "2507589", "2159645", "3898243", "3036012", "2524571", "4011517", "3963465", "2684352", "1964665", "2371702", "3497478", "5054161", "2688670", "3366362", "2941623", "3675518", "4734462", "2632902", "4435381", "3504859", "3674126", "1691473", "2176001", "4075082", "3446569", "2511958", "2805344", "2238869", "2734222", "2215713", "4194960", "1977626", "2485044", "2014474", "2776531", "2073052", "2203823", "3031267", "4011919", "3035182", "2859618", "3366094", "3488527", "4401006", "5740244", "4456396", "5365802", "2789975", "2895261", "2415572", "2420476", "1979315", "2104113", "3764986", "3114766", "4162956", "4386359", "2294132", "2019571", "2781977", "4486191", "2517386", "4243343", "2593498", "5754164", "2970866", "2581532", "5806739", "2105404", "2787716", "3834868", "6835196", "7759281", "8905587", "4900661", "4772677", "3646178", "5643442", "5721546", "4915581", "3104703", "3154693", "2007448", "4737930", "2892303", "3897913", "6535925", "2811161", "5229881", "2081573", "1938549", "1821366", "1458685", "2710586", "2019587", "3374649", "2303183", "3388479", "4171306", "3515042", "4102011", "4266516", "2390513", "2551012", "2398580", "3081258", "3401391", "2637094", "3121577", "2735382", "2932164", "5674735", "2747410", "2227664", "2962670", "2981669", "5179475", "2839551", "3384262", "2966491", "3526136", "5404902", "2765070", "3755590", "5612959", "3909854", "1743079", "2628589", "3225769", "4840318", "3721136", "3007827", "4044941", "6580656", "4314822", "6423918", "6104807", "3697989", "3106388", "3581839", "2042182", "2625440", "3692487", "4239934", "3265557", "3975288", "5451235", "4578220", "4257268", "3115559", "1952089", "2450546", "3352624", "2494735", "1760663", "2265187", "3534877", "2735192", "1770572", "2707723", "3113043", "2782931", "3250024", "4168998", "2877586", "2949093", "3464729", "2113026", "3246133", "3596260", "2301870", "2866339", "4031456", "6965202", "2856078", "2662255", "5014261", "3060642", "3767557", "4745196", "4053929", "4329065", "4922105", "12686892", "6953660", "3034181", "3174300", "5513025", "4596802", "4157005", "3376061", "2772002", "3338811", "1995013", "3306367", "3121122", "5533806", "5283518", "4283679", "7731610", "4367709", "5158770", "3609545", "5402037", "5423890", "7259447", "7159720", "11454454", "4129195", "5997026", "6120077", "2805697", "3790452", "4755097", "3866259", "8328505", "4769775", "4568610", "4805969", "3817549", "5437475", "9740065", "7773589", "6386385", "8536884", "8657699", "9861948", "4758547", "3909047", "2978013", "2347521", "3005234", "3540764", "4219005", "3077069", "2992471", "3901024", "3090790", "3551669", "2812212", "3528251", "3442095", "4627531", "3370124", "2191566", "3303063", "2745242", "3587543", "3147370", "3707901", "3322818", "3548826", "5402821", "2106753", "2759315", "2936130", "3397066", "2556663", "2550235", "4731363", "2546627", "3142219", "2345031", "2286277", "3061634", "3173900", "2580731", "4537338", "3860420", "6775695", "3254808", "2424823", "2185716", "2240972", "1750428", "4452400", "3561129", "2507751", "3269887", "4249412", "4600318", "5249339", "5354614", "3840137", "4128378", "8134295", "2210785", "3404511", "3346277", "2685002", "2614975", "2829037", "3175391", "3029370", "3436621", "2411465", "2899215", "3194307", "2880886", "2854762", "4020097", "3274177", "5202757", "2658763", "3715441", "3262697", "5699220", "5001642", "3157523", "2935739", "2744619", "3691407", "3578077", "3386488", "3137491", "3464850", "6248487", "4032251", "5676897", "5117174", "8226581", "6309959", "6377920", "6508829", "5421546", "7076450", "4491626", "6652506", "5972643", "8211578", "5745460", "7893547", "5938546", "6591232", "6137057", "3329655", "3578573", "3972906", "6385101", "3871415", "3458225", "2934059", "3370133", "3512864", "3712017", "3174746", "5595716", "2924761", "3831017", "4508242", "4634519", "3914404", "5950939", "3615220", "3438993", "4105859", "5107990", "5386164", "3793139", "4741020", "5211605", "4351400", "3886007", "3445210", "2286759", "3008037", "2308805", "3785714", "4770609", "4065060", "3069672", "2707698", "3603064", "3215016", "2960497", "3305200", "3077579", "3265354", "3115212", "6145400", "5833133", "6249119", "2950578", "2357169", "2819620", "3194007", "2156861", "2322830", "2822632", "3246536", "6663724", "2187466", "2781576", "3517895", "2522403", "3061349", "2815548", "2347309", "3485073", "3018944", "4146970", "2305153", "2352414", "1644371", "2349749", "2106643", "2605545", "3937376", "3463653", "4394440", "6601529", "1929169", "2248087", "1890137", "2773493", "1922632", "1737738", "1620436", "2048139", "2294389", "4372904", "3423988", "2708781", "1743078", "2423222", "2258296", "3005078", "3572552", "2326547", "2244407", "4720140", "6367985", "2251598", "2082087", "3105601", "3108800", "2477833", "2596355", "3447238", "3111202", "3085796", "3043735", "3200929", "3163992", "4781036", "4229962", "2263553", "2621573", "4187249", "3093344", "2508241", "2238233", "2691498", "3042281", "4357201", "3765318", "2054134", "2793392", "2362354", "3424205", "3264878", "2552169", "3194051", "3466114", "4068474", "3837304", "5074843", "5491152", "3878817", "7875201", "3432052", "3920121"};
        std::vector<std::string> a = {};
        std::vector<std::string> d = {"2022-08-11", "2022-08-10", "2022-08-09", "2022-08-08", "2022-08-05", "2022-08-04", "2022-08-03", "2022-08-02", "2022-08-01", "2022-07-29", "2022-07-28", "2022-07-27", "2022-07-26", "2022-07-25", "2022-07-22", "2022-07-21", "2022-07-20", "2022-07-19", "2022-07-18", "2022-07-15", "2022-07-14", "2022-07-13", "2022-07-12", "2022-07-11", "2022-07-08", "2022-07-07", "2022-07-06", "2022-07-05", "2022-07-04", "2022-07-01", "2022-06-30", "2022-06-29", "2022-06-28", "2022-06-27", "2022-06-24", "2022-06-23", "2022-06-22", "2022-06-21", "2022-06-20", "2022-06-17", "2022-06-16", "2022-06-15", "2022-06-14", "2022-06-13", "2022-06-10", "2022-06-09", "2022-06-08", "2022-06-07", "2022-06-06", "2022-06-02", "2022-06-01", "2022-05-31", "2022-05-30", "2022-05-27", "2022-05-26", "2022-05-25", "2022-05-24", "2022-05-23", "2022-05-20", "2022-05-19", "2022-05-18", "2022-05-17", "2022-05-16", "2022-05-13", "2022-05-12", "2022-05-11", "2022-05-10", "2022-05-09", "2022-05-06", "2022-05-05", "2022-04-29", "2022-04-28", "2022-04-27", "2022-04-26", "2022-04-25", "2022-04-22", "2022-04-21", "2022-04-20", "2022-04-19", "2022-04-18", "2022-04-15", "2022-04-14", "2022-04-13", "2022-04-12", "2022-04-11", "2022-04-08", "2022-04-07", "2022-04-06", "2022-04-01", "2022-03-31", "2022-03-30", "2022-03-29", "2022-03-28", "2022-03-25", "2022-03-24", "2022-03-23", "2022-03-22", "2022-03-21", "2022-03-18", "2022-03-17", "2022-03-16", "2022-03-15", "2022-03-14", "2022-03-11", "2022-03-10", "2022-03-09", "2022-03-08", "2022-03-07", "2022-03-04", "2022-03-03", "2022-03-02", "2022-03-01", "2022-02-28", "2022-02-25", "2022-02-24", "2022-02-23", "2022-02-22", "2022-02-21", "2022-02-18", "2022-02-17", "2022-02-16", "2022-02-15", "2022-02-14", "2022-02-11", "2022-02-10", "2022-02-09", "2022-02-08", "2022-02-07", "2022-01-28", "2022-01-27", "2022-01-26", "2022-01-25", "2022-01-24", "2022-01-21", "2022-01-20", "2022-01-19", "2022-01-18", "2022-01-17", "2022-01-14", "2022-01-13", "2022-01-12", "2022-01-11", "2022-01-10", "2022-01-07", "2022-01-06", "2022-01-05", "2022-01-04", "2021-12-31", "2021-12-30", "2021-12-29", "2021-12-28", "2021-12-27", "2021-12-24", "2021-12-23", "2021-12-22", "2021-12-21", "2021-12-20", "2021-12-17", "2021-12-16", "2021-12-15", "2021-12-14", "2021-12-13", "2021-12-10", "2021-12-09", "2021-12-08", "2021-12-07", "2021-12-06", "2021-12-03", "2021-12-02", "2021-12-01", "2021-11-30", "2021-11-29", "2021-11-26", "2021-11-25", "2021-11-24", "2021-11-23", "2021-11-22", "2021-11-19", "2021-11-18", "2021-11-17", "2021-11-16", "2021-11-15", "2021-11-12", "2021-11-11", "2021-11-10", "2021-11-09", "2021-11-08", "2021-11-05", "2021-11-04", "2021-11-03", "2021-11-02", "2021-11-01", "2021-10-29", "2021-10-28", "2021-10-27", "2021-10-26", "2021-10-25", "2021-10-22", "2021-10-21", "2021-10-20", "2021-10-19", "2021-10-18", "2021-10-15", "2021-10-14", "2021-10-13", "2021-10-12", "2021-10-11", "2021-10-08", "2021-09-30", "2021-09-29", "2021-09-28", "2021-09-27", "2021-09-24", "2021-09-23", "2021-09-22", "2021-09-17", "2021-09-16", "2021-09-15", "2021-09-14", "2021-09-13", "2021-09-10", "2021-09-09", "2021-09-08", "2021-09-07", "2021-09-06", "2021-09-03", "2021-09-02", "2021-09-01", "2021-08-31", "2021-08-30", "2021-08-27", "2021-08-26", "2021-08-25", "2021-08-24", "2021-08-23", "2021-08-20", "2021-08-19", "2021-08-18", "2021-08-17", "2021-08-16", "2021-08-13", "2021-08-12", "2021-08-11", "2021-08-10", "2021-08-09", "2021-08-06", "2021-08-05", "2021-08-04", "2021-08-03", "2021-08-02", "2021-07-30", "2021-07-29", "2021-07-28", "2021-07-27", "2021-07-26", "2021-07-23", "2021-07-22", "2021-07-21", "2021-07-20", "2021-07-19", "2021-07-16", "2021-07-15", "2021-07-14", "2021-07-13", "2021-07-12", "2021-07-09", "2021-07-08", "2021-07-07", "2021-07-06", "2021-07-05", "2021-07-02", "2021-07-01", "2021-06-30", "2021-06-29", "2021-06-28", "2021-06-25", "2021-06-24", "2021-06-23", "2021-06-22", "2021-06-21", "2021-06-18", "2021-06-17", "2021-06-16", "2021-06-15", "2021-06-11", "2021-06-10", "2021-06-09", "2021-06-08", "2021-06-07", "2021-06-04", "2021-06-03", "2021-06-02", "2021-06-01", "2021-05-31", "2021-05-28", "2021-05-27", "2021-05-26", "2021-05-25", "2021-05-24", "2021-05-21", "2021-05-20", "2021-05-19", "2021-05-18", "2021-05-17", "2021-05-14", "2021-05-13", "2021-05-12", "2021-05-11", "2021-05-10", "2021-05-07", "2021-05-06", "2021-04-30", "2021-04-29", "2021-04-28", "2021-04-27", "2021-04-26", "2021-04-23", "2021-04-22", "2021-04-21", "2021-04-20", "2021-04-19", "2021-04-16", "2021-04-15", "2021-04-14", "2021-04-13", "2021-04-12", "2021-04-09", "2021-04-08", "2021-04-07", "2021-04-06", "2021-04-02", "2021-04-01", "2021-03-31", "2021-03-30", "2021-03-29", "2021-03-26", "2021-03-25", "2021-03-24", "2021-03-23", "2021-03-22", "2021-03-19", "2021-03-18", "2021-03-17", "2021-03-16", "2021-03-15", "2021-03-12", "2021-03-11", "2021-03-10", "2021-03-09", "2021-03-08", "2021-03-05", "2021-03-04", "2021-03-03", "2021-03-02", "2021-03-01", "2021-02-26", "2021-02-25", "2021-02-24", "2021-02-23", "2021-02-22", "2021-02-19", "2021-02-18", "2021-02-10", "2021-02-09", "2021-02-08", "2021-02-05", "2021-02-04", "2021-02-03", "2021-02-02", "2021-02-01", "2021-01-29", "2021-01-28", "2021-01-27", "2021-01-26", "2021-01-25", "2021-01-22", "2021-01-21", "2021-01-20", "2021-01-19", "2021-01-18", "2021-01-15", "2021-01-14", "2021-01-13", "2021-01-12", "2021-01-11", "2021-01-08", "2021-01-07", "2021-01-06", "2021-01-05", "2021-01-04", "2020-12-31", "2020-12-30", "2020-12-29", "2020-12-28", "2020-12-25", "2020-12-24", "2020-12-23", "2020-12-22", "2020-12-21", "2020-12-18", "2020-12-17", "2020-12-16", "2020-12-15", "2020-12-14", "2020-12-11", "2020-12-10", "2020-12-09", "2020-12-08", "2020-12-07", "2020-12-04", "2020-12-03", "2020-12-02", "2020-12-01", "2020-11-30", "2020-11-27", "2020-11-26", "2020-11-25", "2020-11-24", "2020-11-23", "2020-11-20", "2020-11-19", "2020-11-18", "2020-11-17", "2020-11-16", "2020-11-13", "2020-11-12", "2020-11-11", "2020-11-10", "2020-11-09", "2020-11-06", "2020-11-05", "2020-11-04", "2020-11-03", "2020-11-02", "2020-10-30", "2020-10-29", "2020-10-28", "2020-10-27", "2020-10-26", "2020-10-23", "2020-10-22", "2020-10-21", "2020-10-20", "2020-10-19", "2020-10-16", "2020-10-15", "2020-10-14", "2020-10-13", "2020-10-12", "2020-10-09", "2020-09-30", "2020-09-29", "2020-09-28", "2020-09-25", "2020-09-24", "2020-09-23", "2020-09-22", "2020-09-21", "2020-09-18", "2020-09-17", "2020-09-16", "2020-09-15", "2020-09-14", "2020-09-11", "2020-09-10", "2020-09-09", "2020-09-08", "2020-09-07", "2020-09-04", "2020-09-03", "2020-09-02", "2020-09-01", "2020-08-31", "2020-08-28", "2020-08-27", "2020-08-26", "2020-08-25", "2020-08-24", "2020-08-21", "2020-08-20", "2020-08-19", "2020-08-18", "2020-08-17", "2020-08-14", "2020-08-13", "2020-08-12", "2020-08-10", "2020-08-07", "2020-08-06", "2020-08-05", "2020-08-04", "2020-08-03", "2020-07-31", "2020-07-30", "2020-07-29", "2020-07-28", "2020-07-27", "2020-07-24", "2020-07-23", "2020-07-22"};

        const int sz = o.size();
        std::vector<Number> open(sz);
        std::vector<Number> high(sz);
        std::vector<Number> low(sz);
        std::vector<Number> close(sz);
        std::vector<Number> vol(sz);
        std::vector<Number> amount(sz);
        std::vector<Number> timestamp(sz);
        for (int i = 0; i < sz; i++)
        {
            open[i] = std::stod(o[i]);
            high[i] = std::stod(h[i]);
            low[i] = std::stod(l[i]);
            close[i] = std::stod(c[i]);
            vol[i] = std::stod(v[i]);
            amount[i] = std::stod(a[i]);
            timestamp[i] = NumberUtils::toTimestamp(d[i], "%Y-%m-%d");
        }

        StockCore stock;
        stock.open = NumberCore(std::move(open), std::move(o));
        stock.high = NumberCore(std::move(high), std::move(h));
        stock.low = NumberCore(std::move(low), std::move(l));
        stock.close = NumberCore(std::move(close), std::move(c));
        stock.vol = NumberCore(std::move(vol), std::move(v));
        stock.amount = NumberCore(std::move(amount), std::move(a));
        stock.timestamp = NumberCore(std::move(timestamp), std::move(d));
        stock.reverse();
        return stock;
    }

    StockCore TimeSharing()
    {
        std::vector<std::string> o = {"1895.50", "1898.00", "1895.99", "1892.98", "1896.99", "1894.43", "1894.98", "1892.36", "1892.30", "1894.90", "1894.60", "1894.00", "1893.90", "1893.91", "1892.01", "1889.30", "1888.53", "1889.00", "1894.00", "1894.54", "1898.80", "1897.08", "1900.00", "1899.86", "1897.41", "1894.77", "1896.39", "1896.27", "1897.00", "1897.97", "1899.80", "1898.00", "1900.83", "1900.06", "1900.13", "1898.96", "1897.00", "1898.95", "1903.88", "1902.00", "1902.99", "1908.35", "1906.00", "1906.91", "1906.50", "1906.95", "1905.09", "1905.02", "1903.00", "1903.80", "1902.89", "1900.94", "1903.75", "1905.00", "1904.87", "1903.00", "1902.38", "1902.52", "1904.97", "1904.20", "1903.05", "1903.88", "1904.99", "1904.97", "1905.48", "1904.92", "1904.71", "1904.76", "1904.92", "1904.79", "1904.00", "1903.79", "1904.97", "1905.42", "1905.03", "1903.81", "1901.11", "1901.10", "1901.03", "1901.36", "1901.56", "1901.49", "1902.28", "1903.10", "1903.90", "1904.68", "1903.74", "1904.68", "1903.81", "1904.99", "1904.90", "1905.34", "1907.88", "1906.58", "1905.59", "1905.58", "1903.63", "1904.10", "1904.88", "1904.79", "1904.50", "1904.04", "1904.96", "1905.00", "1904.87", "1903.36", "1901.70", "1903.80", "1903.52", "1901.93", "1903.40", "1903.39", "1903.77", "1903.80", "1904.00", "1904.00", "1904.24", "1904.38", "1904.45", "1903.35", "1904.00", "1903.00", "1903.97", "1903.80", "1900.32", "1902.00", "1899.00", "1898.00", "1899.99", "1899.99", "1899.26", "1897.62", "1897.87", "1897.95", "1897.98", "1897.54", "1897.12", "1897.65", "1897.65", "1898.01", "1899.00", "1898.71", "1897.94", "1897.00", "1899.34", "1897.00", "1897.00", "1896.00", "1895.80", "1895.79", "1895.30", "1896.01", "1896.11", "1897.98", "1897.98", "1898.55", "1897.80", "1896.20", "1896.01", "1895.73", "1897.00", "1895.43", "1895.50", "1895.40", "1894.85", "1894.03", "1895.31", "1895.55", "1896.52", "1897.86", "1897.63", "1897.39", "1896.69", "1897.16", "1897.60", "1897.93", "1897.82", "1897.19", "1896.77", "1896.00", "1895.92", "1895.55", "1895.60", "1894.10", "1894.00", "1893.66", "1893.70", "1893.38", "1893.80", "1893.98", "1893.66", "1894.45", "1894.00", "1893.50", "1893.89", "1894.49", "1893.60", "1893.50", "1893.55", "1893.29", "1892.16", "1892.16", "1892.20", "1893.50", "1894.18", "1893.71", "1893.16", "1894.00", "1894.00", "1894.40", "1895.79", "1895.50", "1897.50", "1895.90", "1895.90", "1895.79", "1895.01", "1895.01", "1895.70", "1895.23", "1895.09", "1895.23", "1894.10", "1892.27", "1894.81", "1895.37", "1895.40", "1895.00", "1894.78", "1894.00", "1894.01", "1894.34", "1894.36", "1893.50", "1893.80", "1893.75", "1894.78", "1895.64", "1895.01", "1895.01", "1895.01"};
        std::vector<std::string> h = {"1898.00", "1895.99", "1896.00", "1897.50", "1896.99", "1895.00", "1895.77", "1894.31", "1895.62", "1894.90", "1894.60", "1894.04", "1894.04", "1894.00", "1892.98", "1889.30", "1889.57", "1894.99", "1894.84", "1898.90", "1898.79", "1900.00", "1900.90", "1899.79", "1897.41", "1897.72", "1898.00", "1897.18", "1897.97", "1899.80", "1899.80", "1900.97", "1900.97", "1900.58", "1900.01", "1898.90", "1898.95", "1903.88", "1903.88", "1903.00", "1908.35", "1908.30", "1907.11", "1907.00", "1907.60", "1907.00", "1905.97", "1905.79", "1904.00", "1903.80", "1902.78", "1903.75", "1905.00", "1905.80", "1904.98", "1902.71", "1904.76", "1904.97", "1905.00", "1903.99", "1904.54", "1904.99", "1904.97", "1905.48", "1905.48", "1905.09", "1905.32", "1904.97", "1904.93", "1904.78", "1903.99", "1905.18", "1905.42", "1905.35", "1905.00", "1903.81", "1902.47", "1901.10", "1902.10", "1902.29", "1902.29", "1902.30", "1903.10", "1904.85", "1904.85", "1904.68", "1904.68", "1904.76", "1905.00", "1905.42", "1905.39", "1907.89", "1907.80", "1906.02", "1906.00", "1905.87", "1905.00", "1905.00", "1904.96", "1904.85", "1904.96", "1904.96", "1905.00", "1905.00", "1904.95", "1903.25", "1903.80", "1903.80", "1903.50", "1903.43", "1903.39", "1903.82", "1903.82", "1904.50", "1904.24", "1904.24", "1904.46", "1904.45", "1903.89", "1904.41", "1904.03", "1903.97", "1903.80", "1903.88", "1902.96", "1900.54", "1900.00", "1899.99", "1899.99", "1899.98", "1898.92", "1897.90", "1899.02", "1899.42", "1898.13", "1897.65", "1897.65", "1897.65", "1899.59", "1900.99", "1898.78", "1898.66", "1898.71", "1899.62", "1899.00", "1897.99", "1897.00", "1896.04", "1895.80", "1895.79", "1896.01", "1899.20", "1898.20", "1897.98", "1898.98", "1898.88", "1897.80", "1896.20", "1896.19", "1898.00", "1896.98", "1896.65", "1896.45", "1895.20", "1894.99", "1895.35", "1895.55", "1896.65", "1897.99", "1897.97", "1897.63", "1897.46", "1897.73", "1897.65", "1897.99", "1897.96", "1897.76", "1897.30", "1896.96", "1896.00", "1895.92", "1895.85", "1895.60", "1894.10", "1894.45", "1894.09", "1893.89", "1893.86", "1894.45", "1893.98", "1894.45", "1894.40", "1893.95", "1893.89", "1894.49", "1894.50", "1893.96", "1894.01", "1894.01", "1893.50", "1892.29", "1892.21", "1893.50", "1894.20", "1894.18", "1893.80", "1895.32", "1895.49", "1895.50", "1896.00", "1896.74", "1898.00", "1898.00", "1897.11", "1896.88", "1895.78", "1895.60", "1895.70", "1895.53", "1895.23", "1895.68", "1895.50", "1895.82", "1895.23", "1895.48", "1895.47", "1895.50", "1895.00", "1894.99", "1894.69", "1894.34", "1894.52", "1894.00", "1894.40", "1893.89", "1894.78", "1895.78", "1895.65", "1895.01", "1895.01", "1895.01"};
        std::vector<std::string> l = {"1898.00", "1890.00", "1890.83", "1892.80", "1892.45", "1894.15", "1892.31", "1891.30", "1892.33", "1892.88", "1893.00", "1893.02", "1893.11", "1892.00", "1888.88", "1888.01", "1888.54", "1888.76", "1893.19", "1894.13", "1895.38", "1897.99", "1899.86", "1897.23", "1894.60", "1894.62", "1895.22", "1895.40", "1895.80", "1897.99", "1897.50", "1899.00", "1900.01", "1900.05", "1897.01", "1896.70", "1896.77", "1899.00", "1902.00", "1901.85", "1903.00", "1905.01", "1906.00", "1906.27", "1906.50", "1903.03", "1904.05", "1903.00", "1900.59", "1900.89", "1900.91", "1900.92", "1903.00", "1904.87", "1901.03", "1901.03", "1902.00", "1904.00", "1904.20", "1903.04", "1903.69", "1903.91", "1904.02", "1904.75", "1904.92", "1904.01", "1904.71", "1904.76", "1904.76", "1904.00", "1903.73", "1903.79", "1904.92", "1904.99", "1903.81", "1901.11", "1901.02", "1901.03", "1901.01", "1901.55", "1901.48", "1901.57", "1902.20", "1903.19", "1904.68", "1903.71", "1903.74", "1903.81", "1903.81", "1904.87", "1904.84", "1905.00", "1906.58", "1905.52", "1905.00", "1903.63", "1903.62", "1903.66", "1904.23", "1904.16", "1904.01", "1903.85", "1904.93", "1903.83", "1903.36", "1901.21", "1901.60", "1901.89", "1901.90", "1901.97", "1902.00", "1902.09", "1902.44", "1904.00", "1902.61", "1903.84", "1903.96", "1903.83", "1903.35", "1902.37", "1901.97", "1900.00", "1903.12", "1900.32", "1900.32", "1898.40", "1898.00", "1898.10", "1899.30", "1899.00", "1897.62", "1897.62", "1897.70", "1897.98", "1897.54", "1897.12", "1897.01", "1897.22", "1897.21", "1898.00", "1898.02", "1897.26", "1897.00", "1897.01", "1897.00", "1897.00", "1896.00", "1895.80", "1895.58", "1895.30", "1895.30", "1896.08", "1896.14", "1897.83", "1897.96", "1896.20", "1896.02", "1895.99", "1895.73", "1897.00", "1895.41", "1895.48", "1895.40", "1894.85", "1893.83", "1894.03", "1895.20", "1895.55", "1896.41", "1896.63", "1896.77", "1896.61", "1896.10", "1896.69", "1897.46", "1897.34", "1897.19", "1896.77", "1896.00", "1895.67", "1895.55", "1895.50", "1894.10", "1893.00", "1893.66", "1893.66", "1893.22", "1893.30", "1893.70", "1893.66", "1893.61", "1893.61", "1893.50", "1893.53", "1893.89", "1893.60", "1893.50", "1893.52", "1893.29", "1892.16", "1892.15", "1892.00", "1892.20", "1893.45", "1893.13", "1893.10", "1893.10", "1893.50", "1894.33", "1894.40", "1894.80", "1895.00", "1895.90", "1895.90", "1895.50", "1895.00", "1895.00", "1895.02", "1895.23", "1895.00", "1895.12", "1894.10", "1892.21", "1892.21", "1894.84", "1895.25", "1895.00", "1893.81", "1893.61", "1893.61", "1893.11", "1893.52", "1893.38", "1893.51", "1893.70", "1893.60", "1894.99", "1894.01", "1895.01", "1895.01", "1895.01"};
        std::vector<std::string> c = {"1898.00", "1895.99", "1892.98", "1896.99", "1894.43", "1894.98", "1892.36", "1892.30", "1894.90", "1894.60", "1894.00", "1893.90", "1893.91", "1892.01", "1889.30", "1888.53", "1889.00", "1894.00", "1894.54", "1898.80", "1897.08", "1900.00", "1899.86", "1897.41", "1894.77", "1896.39", "1896.27", "1897.00", "1897.97", "1899.80", "1898.00", "1900.83", "1900.06", "1900.13", "1898.96", "1897.00", "1898.95", "1903.88", "1902.00", "1902.99", "1908.35", "1906.00", "1906.91", "1906.50", "1906.95", "1905.09", "1905.02", "1903.00", "1903.80", "1902.89", "1900.94", "1903.75", "1905.00", "1904.87", "1903.00", "1902.38", "1902.52", "1904.97", "1904.20", "1903.05", "1903.88", "1904.99", "1904.97", "1905.48", "1904.92", "1904.71", "1904.76", "1904.92", "1904.79", "1904.00", "1903.79", "1904.97", "1905.42", "1905.03", "1903.81", "1901.11", "1901.10", "1901.03", "1901.36", "1901.56", "1901.49", "1902.28", "1903.10", "1903.90", "1904.68", "1903.74", "1904.68", "1903.81", "1904.99", "1904.90", "1905.34", "1907.88", "1906.58", "1905.59", "1905.58", "1903.63", "1904.10", "1904.88", "1904.79", "1904.50", "1904.04", "1904.96", "1905.00", "1904.87", "1903.36", "1901.70", "1903.80", "1903.52", "1901.93", "1903.40", "1903.39", "1903.77", "1903.80", "1904.00", "1904.00", "1904.24", "1904.38", "1904.45", "1903.35", "1904.00", "1903.00", "1903.97", "1903.80", "1900.32", "1902.00", "1899.00", "1898.00", "1899.99", "1899.99", "1899.26", "1897.62", "1897.87", "1897.95", "1897.98", "1897.54", "1897.12", "1897.65", "1897.65", "1898.01", "1899.00", "1898.71", "1897.94", "1897.00", "1899.34", "1897.00", "1897.00", "1896.00", "1895.80", "1895.79", "1895.30", "1896.01", "1896.11", "1897.98", "1897.98", "1898.55", "1897.80", "1896.20", "1896.01", "1895.73", "1897.00", "1895.43", "1895.50", "1895.40", "1894.85", "1894.03", "1895.31", "1895.55", "1896.52", "1897.86", "1897.63", "1897.39", "1896.69", "1897.16", "1897.60", "1897.93", "1897.82", "1897.19", "1896.77", "1896.00", "1895.92", "1895.55", "1895.60", "1894.10", "1894.00", "1893.66", "1893.70", "1893.38", "1893.80", "1893.98", "1893.66", "1894.45", "1894.00", "1893.50", "1893.89", "1894.49", "1893.60", "1893.50", "1893.55", "1893.29", "1892.16", "1892.16", "1892.20", "1893.50", "1894.18", "1893.71", "1893.16", "1894.00", "1894.00", "1894.40", "1895.79", "1895.50", "1897.50", "1895.90", "1895.90", "1895.79", "1895.01", "1895.01", "1895.70", "1895.23", "1895.09", "1895.23", "1894.10", "1892.27", "1894.81", "1895.37", "1895.40", "1895.00", "1894.78", "1894.00", "1894.01", "1894.34", "1894.36", "1893.50", "1893.80", "1893.75", "1894.78", "1895.64", "1895.01", "1895.01", "1895.01", "1895.01"};
        std::vector<std::string> v = {"23400", "29961", "13200", "11300", "5300", "5", "8", "5700", "7300", "5800", "4200", "3600", "4900", "10100", "7200", "8400", "5900", "6600", "6100", "22410", "7990", "28900", "6600", "7300", "6300", "2900", "3200", "5", "6900", "7900", "6800", "21476", "5600", "5600", "8800", "5500", "9802", "28800", "15600", "13199", "52500", "12100", "16300", "10500", "12800", "8800", "7600", "3600", "10300", "5800", "1600", "5800", "6800", "2900", "2300", "2500", "2", "3700", "5500", "4200", "5300", "6200", "4800", "7500", "5400", "6700", "2400", "5", "4800", "3800", "3800", "9600", "7800", "4800", "1900", "3700", "3600", "2100", "2200", "2900", "2700", "1700", "3500", "2600", "2100", "1800", "4800", "2100", "14300", "5", "4700", "26300", "5300", "3400", "4300", "2400", "2200", "1900", "1400", "4100", "3200", "4", "4", "3600", "3300", "4200", "2200", "1100", "1900", "1700", "1500", "3800", "4500", "1200", "1401", "1200", "1600", "2800", "2", "5900", "6400", "10866", "2600", "6200", "1700", "9434", "4900", "3200", "4", "3200", "4100", "4500", "1200", "1700", "2900", "5300", "2300", "1400", "5700", "3", "1500", "5700", "9400", "1100", "2200", "4100", "1800", "2300", "3200", "1700", "4600", "3900", "1100", "1400", "4600", "6800", "4500", "3400", "2100", "6100", "2700", "1700", "5300", "9400", "3800", "3700", "2100", "2100", "1400", "1600", "1600", "3100", "4800", "1500", "1700", "3200", "1800", "3", "6700", "1500", "2300", "2700", "4300", "6", "2700", "1300", "2400", "1700", "4800", "2500", "4200", "3700", "2300", "2300", "3900", "4100", "3300", "2600", "4400", "7900", "3600", "8200", "6399", "4", "6500", "4800", "2600", "2900", "1300", "6100", "3600", "13100", "2318", "3700", "1400", "2100", "1700", "3400", "3259", "2941", "2959", "11523", "30700", "3200", "3", "2800", "3300", "5692", "5500", "3700", "7", "5600", "9300", "4100", "9891", "9500", "9684", "9312", "200", "0", "23200"};
        std::vector<std::string> a = {"44413200", "56698416", "25009477", "21407259", "10046672", "9472816", "15153184", "10785793", "13832349", "10986947", "7953015", "6818155", "9279317", "19116021", "13610800", "15862681", "11144934", "12492659", "11556812", "42532042", "15158936", "54902586", "12542116", "13858045", "11943059", "5499136", "6071181", "9480031", "13089573", "14998156", "12914774", "40808541", "10641755", "10641234", "16716991", "10435972", "18605017", "54765952", "29680371", "25115862", "100064363", "23078848", "31080494", "20021872", "24410539", "16771393", "14480711", "6852888", "19597127", "11034", "3042723", "11033200", "12948992", "5525502", "4375938", "4755319", "3806385", "7047259", "10476172", "7993673", "10091087", "11807320", "9142389", "14287779", "10287356", "12761763", "4571779", "9524609", "9143462", "7237353", "7234510", "18285258", "14860609", "9144330", "3618271", "7040411", "6844394", "3992224", "4182612", "5516363", "5135820", "3233449", "6658610", "4950759", "4000023", "3427335", "9140066", "3998626", "27240591", "9525868", "8954426", "50143694", "10108575", "6479866", "8195067", "4570812", "4188992", "3618605", "2666789", "7808987", "6095382", "7617489", "7619864", "6855770", "6283761", "7988677", "4184861", "2093391", "3614913", "3234558", "2854278", "7233470", "8566247", "2285001", "2666522", "2284837", "3046546", "5331359", "3807333", "11227229", "12181125", "20666709", "4948537", "11799141", "3233246", "17920615", "9303119", "6077301", "7598580", "6077706", "7781442", "8539900", "2277818", "3227131", "5503377", "10055654", "4363461", "2656589", "10817830", "5698697", "2847488", "10818192", "17834745", "2088845", "4174355", "7778318", "3413095", "4360640", "6066273", "3222465", "8719847", "7400951", "2087130", "2657057", "8733022", "12905412", "8535109", "6446552", "3981619", "11572296", "5118218", "3223549", "10047051", "17813519", "7197686", "7011529", "3980207", "3982354", "2655560", "3035457", "3035340", "5880794", "9106186", "2845803", "3226162", "6073015", "3415162", "5691631", "12705844", "2843888", "4360194", "5118064", "8147862", "11360367", "5113726", "2462066", "4544287", "3218882", "9091148", "4734332", "7954833", "7007487", "4355423", "4355447", "7386762", "7765623", "6249492", "4923341", "8331308", "14954841", "6811925", "15515159", "12109935", "7576076", "12309888", "9087711", "4924376", "5493117", "2463042", "11562712", "6824422", "24845922", "4397272", "7015901", "2654307", "3980502", "3221777", "6444622", "6177083", "5573561", "5608323", "21835277", "58121389", "6061167", "5685677", "5306908", "6254408", "10784044", "10416817", "7007988", "13257136", "10606549", "17610746", "7765686", "18731162", "17993419", "18355831", "17650485", "379002", "0", "43964232"};
        std::vector<std::string> d = {"1660872600", "1660872660", "1660872720", "1660872780", "1660872840", "1660872900", "1660872960", "1660873020", "1660873080", "1660873140", "1660873200", "1660873260", "1660873320", "1660873380", "1660873440", "1660873500", "1660873560", "1660873620", "1660873680", "1660873740", "1660873800", "1660873860", "1660873920", "1660873980", "1660874040", "1660874100", "1660874160", "1660874220", "1660874280", "1660874340", "1660874400", "1660874460", "1660874520", "1660874580", "1660874640", "1660874700", "1660874760", "1660874820", "1660874880", "1660874940", "1660875000", "1660875060", "1660875120", "1660875180", "1660875240", "1660875300", "1660875360", "1660875420", "1660875480", "1660875540", "1660875600", "1660875660", "1660875720", "1660875780", "1660875840", "1660875900", "1660875960", "1660876020", "1660876080", "1660876140", "1660876200", "1660876260", "1660876320", "1660876380", "1660876440", "1660876500", "1660876560", "1660876620", "1660876680", "1660876740", "1660876800", "1660876860", "1660876920", "1660876980", "1660877040", "1660877100", "1660877160", "1660877220", "1660877280", "1660877340", "1660877400", "1660877460", "1660877520", "1660877580", "1660877640", "1660877700", "1660877760", "1660877820", "1660877880", "1660877940", "1660878000", "1660878060", "1660878120", "1660878180", "1660878240", "1660878300", "1660878360", "1660878420", "1660878480", "1660878540", "1660878600", "1660878660", "1660878720", "1660878780", "1660878840", "1660878900", "1660878960", "1660879020", "1660879080", "1660879140", "1660879200", "1660879260", "1660879320", "1660879380", "1660879440", "1660879500", "1660879560", "1660879620", "1660879680", "1660879740", "1660879800", "1660885260", "1660885320", "1660885380", "1660885440", "1660885500", "1660885560", "1660885620", "1660885680", "1660885740", "1660885800", "1660885860", "1660885920", "1660885980", "1660886040", "1660886100", "1660886160", "1660886220", "1660886280", "1660886340", "1660886400", "1660886460", "1660886520", "1660886580", "1660886640", "1660886700", "1660886760", "1660886820", "1660886880", "1660886940", "1660887000", "1660887060", "1660887120", "1660887180", "1660887240", "1660887300", "1660887360", "1660887420", "1660887480", "1660887540", "1660887600", "1660887660", "1660887720", "1660887780", "1660887840", "1660887900", "1660887960", "1660888020", "1660888080", "1660888140", "1660888200", "1660888260", "1660888320", "1660888380", "1660888440", "1660888500", "1660888560", "1660888620", "1660888680", "1660888740", "1660888800", "1660888860", "1660888920", "1660888980", "1660889040", "1660889100", "1660889160", "1660889220", "1660889280", "1660889340", "1660889400", "1660889460", "1660889520", "1660889580", "1660889640", "1660889700", "1660889760", "1660889820", "1660889880", "1660889940", "1660890000", "1660890060", "1660890120", "1660890180", "1660890240", "1660890300", "1660890360", "1660890420", "1660890480", "1660890540", "1660890600", "1660890660", "1660890720", "1660890780", "1660890840", "1660890900", "1660890960", "1660891020", "1660891080", "1660891140", "1660891200", "1660891260", "1660891320", "1660891380", "1660891440", "1660891500", "1660891560", "1660891620", "1660891680", "1660891740", "1660891800", "1660891860", "1660891920", "1660891980", "1660892040", "1660892100", "1660892160", "1660892220", "1660892280", "1660892340", "1660892400"};

        const int sz = o.size();
        std::vector<Number> open(sz);
        std::vector<Number> high(sz);
        std::vector<Number> low(sz);
        std::vector<Number> close(sz);
        std::vector<Number> vol(sz);
        std::vector<Number> amount(sz);
        std::vector<Number> timestamp(sz);
        for (int i = 0; i < sz; i++)
        {
            open[i] = std::stod(o[i]);
            high[i] = std::stod(h[i]);
            low[i] = std::stod(l[i]);
            close[i] = std::stod(c[i]);
            vol[i] = std::stod(v[i]);
            amount[i] = std::stod(a[i]);
            timestamp[i] = std::stoll(d[i]);
        }

        StockCore stock;
        stock.open = NumberCore(std::move(open), std::move(o));
        stock.high = NumberCore(std::move(high), std::move(h));
        stock.low = NumberCore(std::move(low), std::move(l));
        stock.close = NumberCore(std::move(close), std::move(c));
        stock.vol = NumberCore(std::move(vol), std::move(v));
        stock.amount = NumberCore(std::move(amount), std::move(a));
        stock.timestamp = NumberCore(std::move(timestamp), std::move(d));
        return stock;
    }

    IndexFormula GenerateMACD()
    {
        IndexFormula formular;
        formular.name = "MACD";
        formular.expression =
            "DIF:EMA(CLOSE,SHORT)-EMA(CLOSE,LONG),COLORFF8D1E;\n"
            "DEA:EMA(DIF,M),COLOR0CAEE6;\n"
            "MACD:(DIF-DEA)*2,COLORSTICK,COLORE970DC;\n";
        formular.params = {
            {"SHORT", 12},
            {"LONG", 26},
            {"M", 9}};
        return formular;
    }
}

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    ui.setupUi(this);
    setWindowTitle(STOCK_CHARTS_NAME + QString(" v") + STOCK_CHARTS_VERSION);
    setMouseTracking(true);

    const int nKChartCnt = 2;
    m_kStock = std::make_shared<StockCore>(Candlestick());
    for (int i = 0; i < nKChartCnt; i++)
    {
        bool main = (i == 0);

        auto model = std::make_shared<ChartModel>(m_kStock);
        if (main)
        {
            model->addPlugin<PluginIndicator>();
            model->addPlugin<PluginSuperimposition>();
            model->addPlugin<PluginPainting>();
        }
        else
        {
            model->addPlugin<PluginIndicator>();
        }

        auto vm = std::make_shared<ChartViewModel>(model);
        if (main)
        {
            vm->addLayer<LayerBG>();
            vm->addLayer<LayerStock>();
            vm->addLayer<LayerSuperimposition>();
            vm->addLayer<LayerIndicator>();
            vm->addLayer<LayerPainting>();
            vm->addLayer<LayerCrossLine>();
            vm->addLayer<LayerTitle>(ChartTitleItemFlagStock | ChartTitleItemFlagIndicator);
        }
        else
        {
            vm->addLayer<LayerBG>();
            vm->addLayer<LayerIndicator>();
            vm->addLayer<LayerCrossLine>();
            vm->addLayer<LayerTitle>(ChartTitleItemFlagIndicator);
        }
        for (int j = 0; j < i; j++)
        {
            vm->setSyncOther(m_kcharts[j].vm.get());
            m_kcharts[j].vm->setSyncOther(vm.get());
        }

        auto view = new ChartViewQt(ui.kchartWidget);
        ui.kchartLayout->addWidget(view);
        view->init(vm);
        listen(view);

        m_kcharts.push_back({main, view, vm, model});
    }

    const int nTChartCnt = 2;
    m_tStock = std::make_shared<StockCore>(TimeSharing());
    for (int i = 0; i < nTChartCnt; i++)
    {
        bool main = (i == 0);

        auto model = std::make_shared<ChartModel>(m_tStock);
        model->addPlugin<PluginIndicator>();

        auto vm = std::make_shared<ChartViewModel>(model);
        vm->addLayer<LayerBG>();
        if (main)
        {
            vm->addLayer<LayerStock>();
        }
        vm->addLayer<LayerIndicator>();
        vm->addLayer<LayerCrossLine>();
        for (int j = 0; j < i; j++)
        {
            vm->setSyncOther(m_tcharts[j].vm.get());
            m_tcharts[j].vm->setSyncOther(vm.get());
        }

        auto props = vm->getProps();
        props.lineType = EnStockLineType::Line;
        props.xCoordType = EnXCoordinateType::Fill;
        props.yCoordType = EnYCoordinateType::Linear;
        vm->setProps(props);

        auto view = new ChartViewQt(ui.tchartWidget);
        ui.tchartLayout->addWidget(view);
        view->init(vm);
        listen(view);

        m_tcharts.push_back({main, view, vm, model});
    }

    addIndicator(GenerateMACD(), false);

    // tab-general
    connect(ui.generalPeriod, &QComboBox::currentIndexChanged, this, &MainWindow::slotGeneralPeriod);
    for (auto &chart : m_kcharts)
    {
        if (chart.main)
        {
            connect(ui.generalDrawingType, &QComboBox::currentIndexChanged, chart.view, &ChartViewQt::slotDrawingType);
            connect(ui.generalCorrdinate, &QComboBox::currentIndexChanged, chart.view, &ChartViewQt::slotCorrdinate);
        }
        connect(ui.generalYLWidth, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotYLWidth);
        connect(ui.generalYRWidth, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotYRWidth);
        connect(ui.generalXHeight, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotXHeight);
        connect(ui.generalPaddingLeft, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingLeft);
        connect(ui.generalPaddingTop, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingTop);
        connect(ui.generalPaddingRight, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingRight);
        connect(ui.generalPaddingBottom, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingBottom);
    }
    for (auto &chart : m_tcharts)
    {
        connect(ui.generalYLWidth, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotYLWidth);
        connect(ui.generalYRWidth, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotYRWidth);
        connect(ui.generalXHeight, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotXHeight);
        connect(ui.generalPaddingLeft, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingLeft);
        connect(ui.generalPaddingTop, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingTop);
        connect(ui.generalPaddingRight, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingRight);
        connect(ui.generalPaddingBottom, &QSpinBox::valueChanged, chart.view, &ChartViewQt::slotPaddingBottom);
    }

    // tab-indicator
    connect(ui.indicatorBtnAdd, &QPushButton::clicked, this, &MainWindow::slotIndicatorBtnAdd);
    connect(ui.indicatorBtnClear, &QPushButton::clicked, this, &MainWindow::slotIndicatorBtnClear);

    updateUI();
    slotGeneralPeriod();
}

MainWindow::~MainWindow()
{
}

void MainWindow::on(DataBinding *sender, const std::string &id)
{
    QTimer::singleShot(100, this, SLOT(updateUI()));
}

std::shared_ptr<const StIndicator> MainWindow::addIndicator(const StockCharts::IndexFormula &formula, bool main)
{
    std::shared_ptr<const StIndicator> indicator;
    if (main)
    {
        if (auto pluginIndicator = m_kcharts[0].model->getPlugin<PluginIndicator>())
            indicator = pluginIndicator->addIndicator(formula);
        if (auto pluginIndicator = m_tcharts[0].model->getPlugin<PluginIndicator>())
            indicator = pluginIndicator->addIndicator(formula);
    }
    else
    {
        if (auto pluginIndicator = m_kcharts[1].model->getPlugin<PluginIndicator>())
            indicator = pluginIndicator->addIndicator(formula);
        if (auto pluginIndicator = m_tcharts[1].model->getPlugin<PluginIndicator>())
            indicator = pluginIndicator->addIndicator(formula);
    }
    return indicator;
}

void MainWindow::clearIndicators()
{
    for (auto &chart : m_kcharts)
    {
        if (auto pluginIndicator = chart.model->getPlugin<PluginIndicator>())
            pluginIndicator->delIndicators();
    }
    for (auto &chart : m_tcharts)
    {
        if (auto pluginIndicator = chart.model->getPlugin<PluginIndicator>())
            pluginIndicator->delIndicators();
    }
}

void MainWindow::updateUI()
{
    const auto &props = m_kcharts[0].vm->getProps();
    const auto &ctx = m_kcharts[0].vm->getContext();

    if (ui.generalDrawingType->currentIndex() != (int)props.lineType)
        ui.generalDrawingType->setCurrentIndex((int)props.lineType);
    if (ui.generalCorrdinate->currentIndex() != (int)props.yCoordType)
        ui.generalCorrdinate->setCurrentIndex((int)props.yCoordType);

    if (ui.generalYLWidth->value() != props.ylAxisWidth)
        ui.generalYLWidth->setValue(props.ylAxisWidth);
    if (ui.generalYRWidth->value() != props.yrAxisWidth)
        ui.generalYRWidth->setValue(props.yrAxisWidth);
    if (ui.generalXHeight->value() != props.xAxisHeight)
        ui.generalXHeight->setValue(props.xAxisHeight);

    if (ui.generalPaddingLeft->value() != props.paddingLeft)
        ui.generalPaddingLeft->setValue(props.paddingLeft);
    if (ui.generalPaddingTop->value() != props.paddingTop)
        ui.generalPaddingTop->setValue(props.paddingTop);
    if (ui.generalPaddingRight->value() != props.paddingRight)
        ui.generalPaddingRight->setValue(props.paddingRight);
    if (ui.generalPaddingBottom->value() != props.paddingBottom)
        ui.generalPaddingBottom->setValue(props.paddingBottom);

    if (ui.generalStickWidth->value() != ctx.stickWidth)
        ui.generalStickWidth->setValue(ctx.stickWidth);
    if (ui.generalNodeWidth->value() != ctx.nodeWidth)
        ui.generalNodeWidth->setValue(ctx.nodeWidth);
}

void MainWindow::slotGeneralPeriod()
{
    int period = ui.generalPeriod->currentIndex();

    bool kline = (period == 0);
    ui.kchartWidget->setVisible(kline);
    ui.generalDrawingType->setVisible(kline);
    ui.generalDrawingTypeLabel->setVisible(kline);
    ui.generalCorrdinate->setVisible(kline);
    ui.generalCorrdinateLabel->setVisible(kline);

    bool tline = (period == 1);
    ui.tchartWidget->setVisible(tline);
}

void MainWindow::slotIndicatorBtnAdd()
{
    QString input = ui.indicatorFormularEdit->toPlainText();
    std::string expression = input.toStdString();
    std::map<std::string, int> params;
    for (int row = 0; row < ui.indicatorParamTable->rowCount(); ++row)
    {
        auto key = ui.indicatorParamTable->item(row, 0);
        auto val = ui.indicatorParamTable->item(row, 1);
        if (!key || !val)
            continue;
        params[key->text().toStdString()] = val->text().toInt();
    }
    IndexFormula formular = {"Index", expression, params};

    bool bMain = ui.indicatorRadioMain->isChecked();
    auto indicator = addIndicator(formular, bMain);

    QString tips;
    if (!indicator)
    {
        tips = QString::fromLocal8Bit("未知错误!\n\n");
    }
    else if (indicator->indexCore.err)
    {
        tips = QString::fromLocal8Bit("error!\n\n");
        if (!indicator->indexCore.errExpression.empty())
            tips += QString::fromLocal8Bit("errExpression: ") + QString::fromStdString(indicator->indexCore.errExpression) + "\n\n";
        if (!indicator->indexCore.errWord.empty())
            tips += QString::fromLocal8Bit("errWord: ") + QString::fromStdString(indicator->indexCore.errWord) + "\n\n";
    }
    else
    {
        tips = QString::fromLocal8Bit("success!\n\n");
    }
    ui.indicatorLabel->setText(tips);
}

void MainWindow::slotIndicatorBtnClear()
{
    clearIndicators();

    ui.indicatorLabel->clear();
}
